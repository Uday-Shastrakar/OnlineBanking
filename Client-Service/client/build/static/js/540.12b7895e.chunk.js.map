{"version":3,"file":"static/js/540.12b7895e.chunk.js","mappings":"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","sources":["components/Authentication/ForgotPassword/ForgotPassword.tsx","services/api.ts","services/authService.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { Avatar, Button, Card, Container,Grid, Link, TextField, Typography } from '@mui/material';\nimport './ForgotPassword.css'; \nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport { useNavigate } from 'react-router-dom';\nimport { verifyOtp } from '../../../../src/services/authService';\nimport { forgotPassword } from '../../../../src/services/authService'; \n\nconst Copyright = () => (\n  <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n  {'Copyright Â© ' + new Date().getFullYear() + ' NUMS Bank. All rights reserved.'}\n</Typography>\n);\nconst Forgotpassword: React.FC = () => {\n    const [email, setEmail] = useState<string>('');\n    const [error, setError] = useState<string>('');\n    const [success, setSuccess] = useState<string>('');\n    const [otp, setOtp] = useState<string>('');\n    const [isOtpSent, setIsOtpSent] = useState<boolean>(false);\n    const navigate = useNavigate(); \n\n    const handleForgotPassword = async (event: React.FormEvent) => {\n        event.preventDefault();\n    \n        try {\n          await forgotPassword(email); \n          setSuccess('Password reset request sent. Please check your email for instructions.');\n          setError('');\n          setIsOtpSent(true);\n        } catch (err: any) {\n          setError(err.message || 'Failed to request password reset. Please try again.');\n          setSuccess('');\n        }\n      };\n    \n      const handleOtpVerfication = async (event: React.FormEvent) => {\n        event.preventDefault();\n    \n        try {\n          const response = await verifyOtp(otp);\n    \n          if (response.success) {\n            setSuccess('OTP verified successfully. Redirecting to set a new password.');\n            setError('');\n            // Delay redirection to ensure success message is shown\n            setTimeout(() => navigate('/resetpassword', { state: { otp } }), 1200);\n          } else {\n            setError('Invalid or expired OTP. Please try again.');\n            setSuccess('');\n          }\n        } catch (err: any) {\n          setError(err.message || 'Failed to verify OTP. Please try again.');\n          setSuccess('');\n        }\n      };\n\n  return (\n     <Container className='container'>\n    <Card className='card'>\n    <div className=\"tag\">\n      <Avatar className=\"avatar\">\n        <PersonAddIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\">\n            {isOtpSent ? 'Verify OTP' : \"Send OTP\"}\n          </Typography>\n      </div>\n      <form className=\"form\" onSubmit={isOtpSent ? handleOtpVerfication : handleForgotPassword} noValidate>\n      {!isOtpSent ? (\n              <>\n              <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Enter Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n              </>\n            ) : (\n              <>\n              <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"otp\"\n              label=\"Enter OTP\"\n              name=\"otp\"\n              autoComplete=\"otp\"\n              autoFocus\n              value={otp}\n              onChange={(e) => setOtp(e.target.value)}\n            />\n              </>\n            )}\n            \n          <div className=\"submit-btn\">\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          className=\"submit\"\n        >\n          {isOtpSent ? 'Verify OTP' : 'Send OTP'}\n        </Button>\n        </div>\n        <div>\n        {error && (\n            <Typography color=\"error\" align=\"center\" variant=\"body2\">\n              {error}\n            </Typography>\n          )}\n        </div>\n      </form>\n      </Card>\n  </Container>\n  );\n};\n\nexport default Forgotpassword;\n","import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n\n// Create an Axios instance\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://192.168.1.100:9093/api'  ,// Base URL for your API\n\n  // baseURL: 'http://192.168.1.100:909yar3/api',\n\n  // baseURL: process.env.REACT_APP_API_BASE_URL,\n  \n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add token to headers\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken'); // Retrieve the token from local storage or a state management library\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`; // Add the token to the Authorization header\n    }\n    return config;\n  },\n  (error: AxiosError) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle responses\napi.interceptors.response.use(\n  (response: AxiosResponse): AxiosResponse => {\n    return response;\n  },\n  (error: AxiosError) => {\n    if (error.response && error.response.status === 401) {\n      // Handle unauthorized responses (e.g., token expired)\n      // Redirect to login page or show an alert\n    }\n    return Promise.reject(error);\n  }\n);\n\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message: string | null;\n}\n\nexport default api;\n\n\n\n","import api from \"./api\"\nimport { ApiResponse } from \"./api\"\nimport { Credentials, LoginResponse,RegisterForm,User } from \"../Types\";\n\n\nexport const login = async (credentials: Credentials): Promise<void> => {\n    const response = await api.post<LoginResponse>('auth/login', credentials);\n    \n    \n    // Destructure data from the response\n    const { jwtToken, userName, authorities, userId, email, firstName, lastName, phoneNumber } = response.data.data;\n\n    // Store JWT token in localStorage\n    localStorage.setItem('authToken', jwtToken);\n    // Store userName in localStorage\n    localStorage.setItem(\"userName\", userName);\n    // Store roles and permissions\n    localStorage.setItem(\"roles\", JSON.stringify(authorities.filter(item => [\"ADMIN\", \"USER\", \"CUSTOMER\"].includes(item))));\n    localStorage.setItem(\"permissions\", JSON.stringify(authorities.filter(item => [\"PERMISSION_READ\", \"PERMISSION_WRITE\"].includes(item))));\n    \n    // Store user details in an array format\n    const userDetails = [\n        {\n            userId,\n            email,\n            userName,\n            firstName,\n            lastName,\n            phoneNumber // If phoneNumber exists in the response\n        }\n    ];\n\n    // Store the array in localStorage\n    localStorage.setItem(\"userDetails\", JSON.stringify(userDetails));\n};\n\n\n\n// API call for user registration\nexport const register = async (registerForm: RegisterForm): Promise<RegisterForm> => {\n    const response = await api.post<RegisterForm>('/users/create', registerForm);\n    return response.data;\n};\n\n// API call for user forgot password\nexport const forgotPassword = async (email: string): Promise<String> => {\n    const response = await api.post<String>(`/auth/forgot-password?email=${encodeURIComponent(email)}`);\n    return response.data;\n};\n\n\n// API call for verifying OTP\nexport const verifyOtp = async (otp: string): Promise<ApiResponse<string>> => {\n    const response = await api.post<ApiResponse<string>>(`/auth/verify-otp?otp=${encodeURIComponent(otp)}`);\n    return response.data;\n};\n\n// API call for reset password\nexport const resetPassword = async (otp: string, password: string): Promise<ApiResponse<string>> => {\n    const response = await api.post<ApiResponse<string>>(`/auth/reset-password?otp=${encodeURIComponent(otp)}&newPassword=${encodeURIComponent(password)}`);\n    return response.data;\n};\n\n// API call for fetching Users\nexport const fetchUsers = async (): Promise<ApiResponse<User[]>> => {\n    const response = await api.get<ApiResponse<User[]>>(`/users/get`);\n    return response.data;\n}\n\n// API call for upload document\nexport const uploadDoc = async (userId:number, file:File): Promise<ApiResponse<any>> => {\n    const response = await api.post<ApiResponse<any>>(`{userId}/upload`);\n    return response.data;\n}"],"names":["Forgotpassword","email","setEmail","useState","error","setError","success","setSuccess","otp","setOtp","isOtpSent","setIsOtpSent","navigate","useNavigate","_jsx","Container","className","children","_jsxs","Card","Avatar","PersonAddIcon","Typography","component","variant","onSubmit","async","event","preventDefault","verifyOtp","setTimeout","state","err","message","forgotPassword","noValidate","_Fragment","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","value","onChange","e","target","Button","type","color","align","api","axios","create","baseURL","process","REACT_APP_API_BASE_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","response","status","login","post","credentials","jwtToken","userName","authorities","userId","firstName","lastName","phoneNumber","data","setItem","JSON","stringify","filter","item","includes","userDetails","register","registerForm","encodeURIComponent","resetPassword","password","fetchUsers","get"],"sourceRoot":""}