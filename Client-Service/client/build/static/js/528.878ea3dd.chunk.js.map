{"version":3,"file":"static/js/528.878ea3dd.chunk.js","mappings":"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","sources":["components/Authentication/UserRegistration/UserRegisterForm.tsx","services/api.ts","services/authService.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {Avatar,Button,Card,Container,TextField,Typography} from '@mui/material';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport { useNavigate } from 'react-router-dom';\nimport { register } from '../../../services/authService';\nimport { RegisterForm } from '../../../Types';\nimport './UserRegisterForm.css';\n\n\nconst Register: React.FC = () => {\n  const [registerForm, setRegisterForm] = useState<RegisterForm>({\n    username: '',\n    email: '',\n    phoneNumber: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    roleNames: ['USER'],\n    permissionNames: ['PERMISSION_READ'],\n  });\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [nameError, setNameError] = useState<string>('');\n  const [emailError, setEmailError] = useState<string>('');\n  const [passwordError, setPasswordError] = useState<string>('');\n  const navigate = useNavigate();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setRegisterForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    setNameError('');\n    setEmailError('');\n    setPasswordError('');\n\n    if (!registerForm.username) {\n      setNameError('Username is required');\n      isValid = false;\n    }\n    // if (!registerForm.email || !/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(registerForm.email)) {\n    //   setEmailError('Valid email is required');\n    //   isValid = false;\n    // }\n    if (!registerForm.password) {\n      setPasswordError('Password is required');\n      isValid = false;\n    }\n    if (registerForm.password !== confirmPassword) {\n      setPasswordError('Passwords do not match');\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    try {\n      await register(registerForm);\n      navigate('/login'); // Redirect to desired page\n    } catch (err: any) {\n      setError(err.message || 'Registration failed. Please try again.');\n    }\n  };\n\n  return (\n  <Container className='container'>\n    <Card className='card'>\n    <div className=\"tag\">\n      <Avatar className=\"avatar\">\n        <PersonAddIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\">\n        Register\n      </Typography>\n      {error && <Typography color=\"error\">{error}</Typography>}\n      </div>\n      <form className=\"form\" onSubmit={handleSubmit} noValidate >\n          <div style={{ display: 'flex', flexDirection: 'row', gap: '16px', width: '100%' }}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              id=\"firstName\"\n              label=\"First Name\"\n              name=\"firstName\"\n              autoComplete=\"firstName\"\n              value={registerForm.firstName}\n              onChange={handleInputChange}\n              style={{ flex: 1 }}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              id=\"lastName\"\n              label=\"Last Name\"\n              name=\"lastName\"\n              autoComplete=\"lastName\"\n              value={registerForm.lastName}\n              onChange={handleInputChange}\n              style={{ flex: 1 }}\n            />\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row', gap: '16px', width: '100%' }}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              value={registerForm.email}\n              onChange={handleInputChange}\n              style={{ flex: 1 }}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              \n              id=\"phoneNumber\"\n              label=\"Phone Number\"\n              name=\"phoneNumber\"\n              autoComplete=\"phoneNumber\"\n              value={registerForm.phoneNumber}\n              onChange={handleInputChange}\n              style={{ flex: 1 }}\n            />\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row', gap: '16px', width: '100%' }}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"username\"\n            autoFocus\n            value={registerForm.username}\n            onChange={handleInputChange}\n            style={{ flex: 1 }}\n          />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={registerForm.password}\n              onChange={handleInputChange}\n              style={{ flex: 1 }}\n            />\n          </div>\n          <div className=\"submit-btn\">\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          className=\"submit\"\n        >\n          Register\n        </Button>\n        </div>\n      </form>\n      </Card>\n  </Container>\n  );\n};\n\nexport default Register;\n","import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n\n// Create an Axios instance\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://192.168.1.100:9093/api'  ,// Base URL for your API\n\n  // baseURL: 'http://192.168.1.100:909yar3/api',\n\n  // baseURL: process.env.REACT_APP_API_BASE_URL,\n  \n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add token to headers\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken'); // Retrieve the token from local storage or a state management library\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`; // Add the token to the Authorization header\n    }\n    return config;\n  },\n  (error: AxiosError) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle responses\napi.interceptors.response.use(\n  (response: AxiosResponse): AxiosResponse => {\n    return response;\n  },\n  (error: AxiosError) => {\n    if (error.response && error.response.status === 401) {\n      // Handle unauthorized responses (e.g., token expired)\n      // Redirect to login page or show an alert\n    }\n    return Promise.reject(error);\n  }\n);\n\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message: string | null;\n}\n\nexport default api;\n\n\n\n","import api from \"./api\"\nimport { ApiResponse } from \"./api\"\nimport { Credentials, LoginResponse,RegisterForm,User } from \"../Types\";\n\n\nexport const login = async (credentials: Credentials): Promise<void> => {\n    const response = await api.post<LoginResponse>('auth/login', credentials);\n    \n    \n    // Destructure data from the response\n    const { jwtToken, userName, authorities, userId, email, firstName, lastName, phoneNumber } = response.data.data;\n\n    // Store JWT token in localStorage\n    localStorage.setItem('authToken', jwtToken);\n    // Store userName in localStorage\n    localStorage.setItem(\"userName\", userName);\n    // Store roles and permissions\n    localStorage.setItem(\"roles\", JSON.stringify(authorities.filter(item => [\"ADMIN\", \"USER\", \"CUSTOMER\"].includes(item))));\n    localStorage.setItem(\"permissions\", JSON.stringify(authorities.filter(item => [\"PERMISSION_READ\", \"PERMISSION_WRITE\"].includes(item))));\n    \n    // Store user details in an array format\n    const userDetails = [\n        {\n            userId,\n            email,\n            userName,\n            firstName,\n            lastName,\n            phoneNumber // If phoneNumber exists in the response\n        }\n    ];\n\n    // Store the array in localStorage\n    localStorage.setItem(\"userDetails\", JSON.stringify(userDetails));\n};\n\n\n\n// API call for user registration\nexport const register = async (registerForm: RegisterForm): Promise<RegisterForm> => {\n    const response = await api.post<RegisterForm>('/users/create', registerForm);\n    return response.data;\n};\n\n// API call for user forgot password\nexport const forgotPassword = async (email: string): Promise<String> => {\n    const response = await api.post<String>(`/auth/forgot-password?email=${encodeURIComponent(email)}`);\n    return response.data;\n};\n\n\n// API call for verifying OTP\nexport const verifyOtp = async (otp: string): Promise<ApiResponse<string>> => {\n    const response = await api.post<ApiResponse<string>>(`/auth/verify-otp?otp=${encodeURIComponent(otp)}`);\n    return response.data;\n};\n\n// API call for reset password\nexport const resetPassword = async (otp: string, password: string): Promise<ApiResponse<string>> => {\n    const response = await api.post<ApiResponse<string>>(`/auth/reset-password?otp=${encodeURIComponent(otp)}&newPassword=${encodeURIComponent(password)}`);\n    return response.data;\n};\n\n// API call for fetching Users\nexport const fetchUsers = async (): Promise<ApiResponse<User[]>> => {\n    const response = await api.get<ApiResponse<User[]>>(`/users/get`);\n    return response.data;\n}\n\n// API call for upload document\nexport const uploadDoc = async (userId:number, file:File): Promise<ApiResponse<any>> => {\n    const response = await api.post<ApiResponse<any>>(`{userId}/upload`);\n    return response.data;\n}"],"names":["Register","registerForm","setRegisterForm","useState","username","email","phoneNumber","firstName","lastName","password","roleNames","permissionNames","confirmPassword","setConfirmPassword","error","setError","nameError","setNameError","emailError","setEmailError","passwordError","setPasswordError","navigate","useNavigate","handleInputChange","event","name","value","target","prevForm","_jsx","Container","className","children","_jsxs","Card","Avatar","PersonAddIcon","Typography","component","variant","color","onSubmit","async","preventDefault","register","err","message","noValidate","style","display","flexDirection","gap","width","TextField","margin","required","id","label","autoComplete","onChange","flex","autoFocus","type","Button","api","axios","create","baseURL","process","REACT_APP_API_BASE_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","response","status","login","post","credentials","jwtToken","userName","authorities","userId","data","setItem","JSON","stringify","filter","item","includes","userDetails","forgotPassword","encodeURIComponent","verifyOtp","otp","resetPassword","fetchUsers","get"],"sourceRoot":""}