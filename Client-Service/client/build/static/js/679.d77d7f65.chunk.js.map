{"version":3,"file":"static/js/679.d77d7f65.chunk.js","mappings":"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","sources":["components/Authentication/ResetPassword/ResetPassword.tsx","services/api.ts","services/authService.ts"],"sourcesContent":["import React, { useState, useEffect } from \"react\"; // <-- Added useEffect to the import\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Container,\n  CssBaseline,\n  Grid,\n  Link,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport \"./ResetPassword.css\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\nimport { resetPassword } from '../../../../src/services/authService';\nimport { ApiResponse } from \"../../../../src/services/api\";\n\nconst ResetPassword: React.FC = () => {\n  const [newPassword, setNewPassword] = useState<string>('');\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [passwordsMatch, setPasswordsMatch] = useState<boolean>(true);\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const { otp } = location.state as { otp: string };\n\n  useEffect(() => {\n    // Check if passwords match\n    setPasswordsMatch(newPassword === confirmPassword);\n  }, [newPassword, confirmPassword]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    // Check if passwords match\n    if (!passwordsMatch) {\n      setError('Passwords do not match.');\n      setSuccess('');\n      return;\n    }\n\n    try {\n      const response: ApiResponse<string> = await resetPassword(otp, newPassword);\n\n      if (response.success) {\n        setSuccess('Password reset successfully. Redirecting to login page.');\n        setError('');\n        setTimeout(() => navigate('/login'), 1000);\n      } else {\n        setError('Error resetting password. Please try again.');\n        setSuccess('');\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to reset password. Please try again.');\n      setSuccess('');\n    }\n  };\n\n  return (\n    <Container className=\"container\">\n      <Card className=\"card\">\n        <div className=\"tag\">\n          <Avatar className=\"avatar\">\n            <PersonAddIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Reset Password\n          </Typography>\n          {error && <Typography color=\"error\">{error}</Typography>}\n        </div>\n        <form className=\"form\" onSubmit={handleSubmit} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"new-password\"\n            label=\"New Password\"\n            name=\"new-password\"\n            type=\"password\"\n            autoComplete=\"new-password\"\n            value={newPassword}\n            onChange={(e) => setNewPassword(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"confirm-password\"\n            label=\"Confirm Password\"\n            name=\"confirm-password\"\n            type=\"password\"\n            autoComplete=\"new-password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n          />\n          <div className=\"submit-btn\">\n            <Button type=\"submit\" variant=\"contained\" className=\"submit\" disabled={!passwordsMatch}>\n              Reset Password\n            </Button>\n          </div>\n          {!passwordsMatch && (\n            <Typography color=\"error\" align=\"center\" variant=\"body2\" mt={2}>\n              Passwords do not match.\n            </Typography>\n          )}\n          {error && (\n            <Typography color=\"error\" align=\"center\" variant=\"body2\" mt={2}>\n              {error}\n            </Typography>\n          )}\n          {success && (\n            <Typography color=\"success.main\" align=\"center\" variant=\"body2\" mt={2}>\n              {success}\n            </Typography>\n          )}\n        </form>\n      </Card>\n    </Container>\n  );\n};\n\nexport default ResetPassword;\n","import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n\n// Create an Axios instance\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://192.168.1.100:9093/api'  ,// Base URL for your API\n\n  // baseURL: 'http://192.168.1.100:909yar3/api',\n\n  // baseURL: process.env.REACT_APP_API_BASE_URL,\n  \n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add token to headers\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken'); // Retrieve the token from local storage or a state management library\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`; // Add the token to the Authorization header\n    }\n    return config;\n  },\n  (error: AxiosError) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle responses\napi.interceptors.response.use(\n  (response: AxiosResponse): AxiosResponse => {\n    return response;\n  },\n  (error: AxiosError) => {\n    if (error.response && error.response.status === 401) {\n      // Handle unauthorized responses (e.g., token expired)\n      // Redirect to login page or show an alert\n    }\n    return Promise.reject(error);\n  }\n);\n\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message: string | null;\n}\n\nexport default api;\n\n\n\n","import api from \"./api\"\nimport { ApiResponse } from \"./api\"\nimport { Credentials, LoginResponse,RegisterForm,User } from \"../Types\";\n\n\nexport const login = async (credentials: Credentials): Promise<void> => {\n    const response = await api.post<LoginResponse>('auth/login', credentials);\n    \n    \n    // Destructure data from the response\n    const { jwtToken, userName, authorities, userId, email, firstName, lastName, phoneNumber } = response.data.data;\n\n    // Store JWT token in localStorage\n    localStorage.setItem('authToken', jwtToken);\n    // Store userName in localStorage\n    localStorage.setItem(\"userName\", userName);\n    // Store roles and permissions\n    localStorage.setItem(\"roles\", JSON.stringify(authorities.filter(item => [\"ADMIN\", \"USER\", \"CUSTOMER\"].includes(item))));\n    localStorage.setItem(\"permissions\", JSON.stringify(authorities.filter(item => [\"PERMISSION_READ\", \"PERMISSION_WRITE\"].includes(item))));\n    \n    // Store user details in an array format\n    const userDetails = [\n        {\n            userId,\n            email,\n            userName,\n            firstName,\n            lastName,\n            phoneNumber // If phoneNumber exists in the response\n        }\n    ];\n\n    // Store the array in localStorage\n    localStorage.setItem(\"userDetails\", JSON.stringify(userDetails));\n};\n\n\n\n// API call for user registration\nexport const register = async (registerForm: RegisterForm): Promise<RegisterForm> => {\n    const response = await api.post<RegisterForm>('/users/create', registerForm);\n    return response.data;\n};\n\n// API call for user forgot password\nexport const forgotPassword = async (email: string): Promise<String> => {\n    const response = await api.post<String>(`/auth/forgot-password?email=${encodeURIComponent(email)}`);\n    return response.data;\n};\n\n\n// API call for verifying OTP\nexport const verifyOtp = async (otp: string): Promise<ApiResponse<string>> => {\n    const response = await api.post<ApiResponse<string>>(`/auth/verify-otp?otp=${encodeURIComponent(otp)}`);\n    return response.data;\n};\n\n// API call for reset password\nexport const resetPassword = async (otp: string, password: string): Promise<ApiResponse<string>> => {\n    const response = await api.post<ApiResponse<string>>(`/auth/reset-password?otp=${encodeURIComponent(otp)}&newPassword=${encodeURIComponent(password)}`);\n    return response.data;\n};\n\n// API call for fetching Users\nexport const fetchUsers = async (): Promise<ApiResponse<User[]>> => {\n    const response = await api.get<ApiResponse<User[]>>(`/users/get`);\n    return response.data;\n}\n\n// API call for upload document\nexport const uploadDoc = async (userId:number, file:File): Promise<ApiResponse<any>> => {\n    const response = await api.post<ApiResponse<any>>(`{userId}/upload`);\n    return response.data;\n}"],"names":["ResetPassword","newPassword","setNewPassword","useState","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","passwordsMatch","setPasswordsMatch","location","useLocation","navigate","useNavigate","otp","state","useEffect","_jsx","Container","className","children","_jsxs","Card","Avatar","PersonAddIcon","Typography","component","variant","color","onSubmit","async","event","preventDefault","resetPassword","setTimeout","err","message","noValidate","TextField","margin","required","fullWidth","id","label","name","type","autoComplete","value","onChange","e","target","Button","disabled","align","mt","api","axios","create","baseURL","process","REACT_APP_API_BASE_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","response","status","login","post","credentials","jwtToken","userName","authorities","userId","email","firstName","lastName","phoneNumber","data","setItem","JSON","stringify","filter","item","includes","userDetails","register","registerForm","forgotPassword","encodeURIComponent","verifyOtp","password","fetchUsers","get"],"sourceRoot":""}